AWSTemplateFormatVersion: "2010-09-09"
Description: OpenSearchServiceDomain resource
Parameters:
  DomainName:
    Description: User-defined OpenSearch domain name
    Type: String
    Default: "my-es"
  EngineVersion:
    Description: User-defined OpenSearch version
    Type: String
    Default: "OpenSearch_1.0"
  InstanceType:
    Type: String
    Default: "m3.medium.search"
  GroupDescription:
    Type: String
    Default: "my-securitygroup"
  SGName:
    Type: String
    Default: "my-sg"
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: "elastic-stack"

Resources:
  OpenSearchServiceDomain:
    Type: AWS::OpenSearchService::Domain
    Properties:
      DomainName:
        Ref: DomainName
      EngineVersion:
        Ref: EngineVersion
      ClusterConfig:
        InstanceCount: "1"
        InstanceType:
          Ref: InstanceType
      EBSOptions:
        EBSEnabled: true
        Iops: "0"
        VolumeSize: "10"
        VolumeType: "standard"
      AccessPolicies:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: "arn:aws:iam::645402554699:user/tomoyuki"
            Action: "es:*"
            Resource: "arn:aws:es:ap-northeast-1:645402554699:domain/my-es/*"
      AdvancedOptions:
        rest.action.multi.allow_explicit_index: true
        override_main_response_version: true
      Tags:
        - Key: foo
          Value: bar
      VPCOptions:
        SubnetIds:
          - Ref: Subnet
        SecurityGroupIds:
          - Ref: SecurityGroup
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.31.0.0/16
  # Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: Vpc
      CidrBlock: 172.31.0.0/20
      AvailabilityZone: "ap-northeast-1a"
      MapPublicIpOnLaunch: True
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: Vpc
      CidrBlock: 172.31.16.0/20
      AvailabilityZone: "ap-northeast-1c"
      MapPublicIpOnLaunch: True
  # RoutTable
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
  Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
  SubnetRootTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet
      RouteTableId: !Ref RouteTable
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group
      VpcId: !Ref Vpc
  SecurityGroupHTTPinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref "SecurityGroup"
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0
  SecurityGroupSSHinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref "SecurityGroup"
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-085e9421f80dbe728
      KeyName: !Ref KeyName
      InstanceType: t2.micro
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref Subnet
          GroupSet:
            - !Ref SecurityGroup
  Alb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: Alb
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "30"
      Subnets:
        - !Ref Subnet
        - !Ref Subnet2
      SecurityGroups: [!Ref SecurityGroup]
  AlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: ServiceRole
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref Alb
      Port: 443
      Protocol: HTTPS
  AlbListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: AlbListener
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref AlbListener
      Priority: 1
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: Alb
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: TargetGroup
      Port: 443
      Protocol: HTTPS
      UnhealthyThresholdCount: 2
      VpcId: !Ref Vpc
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: "arn:aws:iam::645402554699:user/tomoyuki"
            Action: ["sts:AssumeRole"]
      Path: /_dashboards/
      Policies:
        - PolicyName: servicePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  [
                    "elasticloadbalancing:*",
                    "ec2:Describe*",
                    "ec2:AuthorizeSecurityGroupIngress",
                  ]
                Resource: "*"
Outputs:
  Arn:
    Value:
      "Fn::GetAtt":
        - OpenSearchServiceDomain
        - Arn
  DomainEndpoint:
    Value:
      "Fn::GetAtt":
        - OpenSearchServiceDomain
        - DomainEndpoint
  SecurityGroupId:
    Value:
      Ref: SecurityGroup
  SubnetId:
    Value:
      Ref: Subnet
