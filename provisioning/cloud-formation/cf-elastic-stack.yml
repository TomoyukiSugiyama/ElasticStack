AWSTemplateFormatVersion: 2010-09-09
Description: ElasticStack
Parameters:
  AvailabilityZone:
    Type: String
  AppName:
    Type: String
    Description: Name of app requiring ELB exposure
    Default: simple-app
  AppContainerPort:
    Type: Number
    Description: Container port of app requiring ELB exposure
    Default: '80'
  AppHostPort:
    Type: Number
    Description: Host port of app requiring ELB exposure
    Default: '80'

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 172.31.0.0/16
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "ap-northeast-1a"
      CidrBlock: 172.31.0.0/20
      VpcId: !Ref VPC
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "ap-northeast-1c"
      CidrBlock: 172.31.16.0/20
      VpcId: !Ref VPC
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
  #SubnetRouteTableAssociation:
  #  Type: AWS::EC2::SubnetRouteTableAssociation
  #  Properties:
  #    SubnetId: !Ref Subnet
  #    RouteTableId: !Ref RouteTable
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Security Group for Elastic Stack
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: "443"
          ToPort: "443"
          CidrIp: "0.0.0.0/0"
        - IpProtocol: -1
          CidrIp: "192.168.0.0/24"
  ElasticStackCluster:
    Type: AWS::ECS::Cluster
  ElasticStackTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - 
          Name: !Ref AppName
          Image: nginx:latest
          #Image: docker.elastic.co/kibana/kibana:7.14.1
          #Cpu: '512'
          MemoryReservation: 128
          PortMappings:
            - ContainerPort: !Ref AppContainerPort
              HostPort: !Ref AppHostPort
          #Memory: '512'
          #TaskRoleArn: "arn:aws:iam::645402554699:role/ecsTaskExecutionRole"
          #Essential: true
  ElasticStackService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ElasticStackCluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      LoadBalancers:
        - ContainerName: !Ref AppName
          ContainerPort: !Ref AppContainerPort
          LoadBalancerName: !Ref KibanaInstanceLB
      #NetworkConfiguration:
      #  AwsvpcConfiguration:
      #    AssignPublicIp: ENABLED
      #    SecurityGroups:
      #      - !Ref SecurityGroup
      #    Subnets:
      #      - !Ref Subnet
      TaskDefinition: !Ref ElasticStackTaskDefinition
      ServiceName: 'ElasticStackService'
      Role: !Ref Role
  KibanaInstanceLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: 'KibanaInstanceLB'
      #Listeners:
      #  - InstancePort: !Ref AppHostPort
      #    LoadBalancerPort: '80'
      #    Protocol: HTTP
      Subnets:
        - !Ref Subnet
        - !Ref Subnet2
      SecurityGroups:
        - !Ref SecurityGroup
    DependsOn: InternetGatewayAttachment
  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ecs.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole'

Outputs:
  SecurityGroupId:
    Value:
      Ref: SecurityGroup
  SubnetId:
    Value:
      Ref: Subnet
  Cluster:
    Value: !Ref ElasticStackCluster
